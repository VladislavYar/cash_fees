version: '3'

volumes:
  pg_data:
  redis_data:
  redis.conf:
  static:
  media:

services:

  db:
    image: postgres:16-alpine
    env_file: .env
    restart: always
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 3s
    ports:
      - ${DOCKER_COMPOSER_PORT_DB:-5432:5432}

  redis:
    image: redis:alpine
    env_file: .env
    restart: always
    volumes:
      - redis_data:/root/redis
      - redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    ports:
      - ${DOCKER_COMPOSER_PORT_REDIS:-6379:6379}

  backend:
    restart: always
    build:
      context: ../
      dockerfile: Dockerfile
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: bash -c "make project-start-in-container"
    volumes:
      - media:/app/media
      - static:/app/static
      - ../src/:/app/src/
    ports:
      - 8000:8000

  celery-worker:
    restart: always
    build:
      context: ../
      dockerfile: Dockerfile
    depends_on:
      - db
      - redis
      - backend
    command: bash -c "cd src && celery -A config worker -l info"
    env_file: .env
    volumes:
      - ../src/:/app/src/

  celery-beat:
    restart: always
    build:
      context: ../
      dockerfile: Dockerfile
    depends_on:
      - db
      - redis
      - backend
      - celery-worker
    command: bash -c "cd src && celery -A config beat --loglevel=INFO"
    env_file: .env
    volumes:
      - ../src/:/app/src/

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080


